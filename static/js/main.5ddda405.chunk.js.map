{"version":3,"sources":["App.jsx","index.jsx"],"names":["goodsFromServer","ACTIVE_ABC","ACTIVE_LENGTH","ACTIVE_REVERSE","App","useState","sortField","setSortField","reverseField","setReverseField","visibleGoods","goods","preparedGoods","sort","sortA","sortB","localeCompare","reverse","getPreparedGoods","className","type","cn","onClick","map","good","ReactDOM","render","document","getElementById"],"mappings":"iPAMaA,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UAGIC,EAAa,MACbC,EAAgB,SAChBC,GAAiB,EA8ChB,IAAMC,EAAM,WACjB,MAAkCC,mBAAS,IAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAwCF,oBAAS,GAAjD,mBAAOG,EAAP,KAAqBC,EAArB,KACMC,EA/CR,SAA0BC,EAA1B,GAA+D,IAA5BL,EAA2B,EAA3BA,UAAWE,EAAgB,EAAhBA,aACxCI,EAAa,YAAOD,GAwCxB,OAtCIL,GACFM,EAAcC,MAAK,SAACC,EAAOC,GACzB,OAAQT,GACN,KAAKL,EACH,OAAOa,EAAME,cAAcD,GAE7B,KAAKb,EACH,OAAOY,EAAMR,GAAaS,EAAMT,GAElC,KAAKH,EACH,OAAOW,EAAQC,EAEjB,QACE,OAAO,MAKXP,IACFI,EAAgBA,EAAcK,WAmBzBL,EAOHM,CAAiBlB,EAAiB,CAAEM,YAAWE,iBAEnD,OACE,sBAAKW,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IACT,iBACA,CAAE,WAAYf,IAAcL,IAE9BqB,QAAS,WACPf,EAAaN,IAPjB,iCAaA,wBACEmB,KAAK,SACLD,UAAWE,IACT,oBACA,CAAE,WAAYf,IAAcJ,IAE9BoB,QAAS,WACPf,EAAaL,IAPjB,4BAaCM,IAAiBL,EAChB,wBACEiB,KAAK,SACLD,UAAU,oBACVG,QAAS,WACPb,GAAgB,IAJpB,qBAUA,wBACEW,KAAK,SACLD,UAAU,6BACVG,QAAS,WACPb,EAAgBN,IAJpB,sBAWAG,GAAaE,IACb,wBACEY,KAAK,SACLD,UAAU,4BACVG,QAAS,WACPf,EAAa,IACbE,GAAgB,IALpB,sBAaJ,6BACGC,EAAaa,KAAI,SAAAC,GAAI,OACpB,oBAAe,UAAQ,OAAvB,SAA+BA,GAAtBA,YCzInBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.5ddda405.chunk.js","sourcesContent":["import cn from 'classnames';\nimport { useState } from 'react';\n\nimport 'bulma/css/bulma.css';\nimport './App.scss';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nconst ACTIVE_ABC = 'abc';\nconst ACTIVE_LENGTH = 'length';\nconst ACTIVE_REVERSE = true;\n\nfunction getPreparedGoods(goods, { sortField, reverseField }) {\n  let preparedGoods = [...goods];\n\n  if (sortField) {\n    preparedGoods.sort((sortA, sortB) => {\n      switch (sortField) {\n        case ACTIVE_ABC:\n          return sortA.localeCompare(sortB);\n\n        case ACTIVE_LENGTH:\n          return sortA[sortField] - sortB[sortField];\n\n        case ACTIVE_REVERSE:\n          return sortA - sortB;\n\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (reverseField) {\n    preparedGoods = preparedGoods.reverse();\n  }\n  // if (reverseField) {\n  //   preparedGoods.sort((sortA, sortB) => {\n  //     switch (sortField) {\n  //       case ACTIVE_ABC:\n  //         return sortB.localeCompare(sortA);\n\n  //       case ACTIVE_LENGTH:\n  //         return sortB[sortField] - sortA[sortField];\n\n  //       default:\n  //         return 0;\n  //     }\n  //   });\n\n  //   // preparedGoods.reverse();\n  // }\n\n  return preparedGoods;\n}\n\nexport const App = () => {\n  const [sortField, setSortField] = useState('');\n  const [reverseField, setReverseField] = useState(false);\n  const visibleGoods\n    = getPreparedGoods(goodsFromServer, { sortField, reverseField });\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={cn(\n            'button is-info',\n            { 'is-light': sortField !== ACTIVE_ABC },\n          )}\n          onClick={() => {\n            setSortField(ACTIVE_ABC);\n          }}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn(\n            'button is-success',\n            { 'is-light': sortField !== ACTIVE_LENGTH },\n          )}\n          onClick={() => {\n            setSortField(ACTIVE_LENGTH);\n          }}\n        >\n          Sort by length\n        </button>\n\n        {reverseField === ACTIVE_REVERSE ? (\n          <button\n            type=\"button\"\n            className=\"button is-warning\"\n            onClick={() => {\n              setReverseField(false);\n            }}\n          >\n            Reverse\n          </button>\n        ) : (\n          <button\n            type=\"button\"\n            className=\"button is-warning is-light\"\n            onClick={() => {\n              setReverseField(ACTIVE_REVERSE);\n            }}\n          >\n            Reverse\n          </button>\n        )}\n\n        {(sortField || reverseField) && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={() => {\n              setSortField('');\n              setReverseField(false);\n            }}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        {visibleGoods.map(good => (\n          <li key={good} data-cy=\"Good\">{good}</li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}